generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  SB_OWNER
  ORG_OWNER
  ORG_ADMIN
  ORG_CLIENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model Organization {
  id   String @id @default(cuid())
  name String
  orgName String @unique
  logoUrl String?

  users User[]
  applications    Application[]
  templates       Template[]
}

model User {
  id              String    @id @default(cuid())
  organizationId  String?
  name            String?
  email           String?
  emailVerified   DateTime?
  image           String?
  password        String?
  role            UserRole @default(ORG_CLIENT)
  status          UserStatus @default(ACTIVE)
  
  accounts        Account[]
  organization    Organization? @relation(fields: [organizationId], references: [id])
  assignedClients Application[] @relation("AssignedClient")

  @@unique([organizationId, email])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String @unique
  token String @unique
  expires DateTime
}

model ResetPasswordToken {
  id String @id @default(cuid())
  email String @unique
  token String @unique
  expires DateTime
}

enum ApplicationStatus {
  CREATED
  INPROGRESS
  SUBMITTED
  APPROVED
  REJECTED
}

enum ApplicationRole {
  MAIN
  SPOUSE
  CHILD
  OTHER
}

model Application {
  id          String @id @default(cuid())
  orgId       String
  clientId    String
  templateName String
  applicantFirstName String @default("unnamed")
  applicantLastName  String @default("applicant")
  role        ApplicationRole @default(MAIN)
  status      ApplicationStatus @default(CREATED)

  categories Category[]

  organization        Organization   @relation(fields: [orgId], references: [id])
  client      User  @relation("AssignedClient", fields: [clientId], references: [id], onDelete: Cascade)
}

model Category {
  id    String @id @default(cuid())
  title String
  position Int
  applicationId String

  sections Section[]

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Section {
  id            String @id @default(cuid())
  title         String
  position      Int
  categoryId    String
  
  questionSets  QuestionSet[]

  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

enum QuestionSetType {
  FLAT
  LOOP
  DEPENDS_ON
}

model QuestionSet {
  id            String @id @default(cuid())
  type          QuestionSetType
  position      Int
  sectionId     String
  questionSetId String?

  questions     Question[]
  questionSets  QuestionSet[] @relation("QuestionSetRelation")

  section       Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  questionSet   QuestionSet? @relation("QuestionSetRelation", fields: [questionSetId], references: [id])

  @@map("question_set")

}

enum QuestionType {
  TEXT_INPUT
  TEXTAREA
  SELECT
  DATE_INPUT
  RADIO
  CHECKBOX
  DOCUMENT
}

model Question {
  id            String @id @default(cuid())
  type          QuestionType
  prompt        String
  position      Int
  helperText    String?
  settings      Json @default("{}")
  questionSetId String
  answer        Answer?

  questionSet   QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
}

model Answer {
  id            String @id @default(cuid())
  questionId    String @unique
  text          String?
   
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Template {
  id      String @id @default(cuid())
  orgId   String
  title   String @default("Untitled")
  description String?

  categories TemplateCategory[]
  
  org Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model TemplateCategory {
  id          String @id @default(cuid())
  title       String
  position    Int
  templateId  String

  sections    TemplateSection[]

  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model TemplateSection {
  id          String @id @default(cuid())
  title       String
  position    Int
  categoryId  String

  questionSets   TemplateQuestionSet[]

  category    TemplateCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

enum TemplateQuestionSetType {
  FLAT
  LOOP
  DEPENDS_ON
}

model TemplateQuestionSet {
  id            String @id @default(cuid())
  type          TemplateQuestionSetType
  position      Int
  sectionId     String
  questionSetId String?

  questions     TemplateQuestion[]
  questionSets  TemplateQuestionSet[] @relation("TemplateQuestionSetRelation")

  section       TemplateSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  questionSet   TemplateQuestionSet? @relation("TemplateQuestionSetRelation", fields: [questionSetId], references: [id])

  @@map("template_question_set")
}

enum TemplateQuestionType {
  TEXT_INPUT
  TEXTAREA
  SELECT
  DATE_INPUT
  RADIO
  CHECKBOX
  DOCUMENT
}

model TemplateQuestion {
  id            String @id @default(cuid())
  type          TemplateQuestionType
  prompt        String
  position      Int
  helperText    String?
  settings      Json @default("{}")
  questionSetId String

  questionSet TemplateQuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
}
