generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  SB_OWNER
  ORG_OWNER
  ORG_ADMIN
  ORG_CLIENT
}

enum ApplicationStatus {
  CREATED
  INPROGRESS
  SUBMITTED
  APPROVED
  REJECTED
}

model Organization {
  id   String @id @default(cuid())
  name String @unique

  users User[]
}

model User {
  id              String    @id @default(cuid())
  organizationId  String?
  name            String?
  email           String?
  emailVerified   DateTime?
  image           String?
  password        String?
  role            UserRole @default(ORG_CLIENT)
  
  accounts        Account[]
  organization    Organization? @relation(fields: [organizationId], references: [id])
  templates       Template[]
  applications    Application[]
  assignedClients Application[] @relation("AssignedClient")

  @@unique([organizationId, email])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  
  @@unique([email, token])
}

model Application {
  id          String @id @default(cuid())
  userId      String
  clientId    String
  status      ApplicationStatus @default(CREATED)

  categories Category[]

  user        User   @relation(fields: [userId], references: [id])
  client      User  @relation("AssignedClient", fields: [clientId], references: [id])
}

model Category {
  id    String @id @default(cuid())
  title String
  position Int
  applicationId String

  sections Section[]

  application Application @relation(fields: [applicationId], references: [id])
}

model Section {
  id          String @id @default(cuid())
  title       String
  position    Int
  categoryId  String
  questionSets   QuestionSet[]

  category    Category @relation(fields: [categoryId], references: [id])
}

model QuestionSet {
  id          String @id @default(cuid())
  type        String
  position    Int
  sectionId   String
  questions   Question[]

  section     Section @relation(fields: [sectionId], references: [id])
}

model Question {
  id          String @id @default(cuid())
  type        String
  prompt      String
  position    Int
  helperText  String?
  questionSetId String

  questionSet QuestionSet @relation(fields: [questionSetId], references: [id])
}

model Template {
  id      String @id @default(cuid())
  userId  String
  title   String @default("Untitled")
  description String?

  templateCategories TemplateCategory[]
  
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TemplateCategory {
  id          String @id @default(cuid())
  title       String
  position    Int
  templateId  String

  templateSections    TemplateSection[]

  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model TemplateSection {
  id          String @id @default(cuid())
  title       String
  position    Int
  tempCategoryId  String

  templateQuestionSets   TemplateQuestionSet[]

  category    TemplateCategory @relation(fields: [tempCategoryId], references: [id], onDelete: Cascade)
}

model TemplateQuestionSet {
  id          String @id @default(cuid())
  type        String
  position    Int
  tempSectionId   String

  templateQuestions   TemplateQuestion[]

  section     TemplateSection @relation(fields: [tempSectionId], references: [id], onDelete: Cascade)
}

model TemplateQuestion {
  id          String @id @default(cuid())
  type        String
  prompt      String
  position    Int
  helperText  String?
  tempQuestionSetId String

  questionSet TemplateQuestionSet @relation(fields: [tempQuestionSetId], references: [id], onDelete: Cascade)
}